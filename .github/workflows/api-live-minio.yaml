name: api-live-minio

on:
  workflow_dispatch:

jobs:
  api-live:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      PM_PORT: 3101
      FORCE_PM_PORT: 3001
      UI_PORT: 4100
      USE_MINIO: true
      E2E_EXPECT_API: true
      E2E_REQUIRE_MINIO: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci
        working-directory: ui-poc

      - name: Install playwright
        run: npx playwright install --with-deps chromium
        working-directory: ui-poc

      - name: Run podman live tests and verify telemetry seed
        env:
          TELEMETRY_MIN_SEEDED: 5
          FORCE_PM_PORT: ${{ env.FORCE_PM_PORT }}
          PM_PORT: ${{ env.PM_PORT }}
          UI_PORT: ${{ env.UI_PORT }}
          USE_MINIO: ${{ env.USE_MINIO }}
          UI_HEADLESS: ${{ env.UI_HEADLESS }}
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y podman podman-compose

          FORCE_PM_PORT="${FORCE_PM_PORT}" \
          PM_PORT="${PM_PORT}" \
          UI_PORT="${UI_PORT}" \
          USE_MINIO="${USE_MINIO}" \
          UI_HEADLESS="${UI_HEADLESS}" \
          scripts/run_podman_ui_poc.sh --tests-only &
          RUN_PID=$!

          cleanup() {
            set +e
            if kill -0 "${RUN_PID}" 2>/dev/null; then
              wait "${RUN_PID}"
            fi
          }
          trap cleanup EXIT

          echo "Waiting for pm-service to become healthy on port ${PM_PORT}"
          for attempt in $(seq 1 60); do
            if curl -fsS "http://localhost:${PM_PORT}/health" >/dev/null 2>&1; then
              break
            fi
            sleep 2
          done

          if ! curl -fsS "http://localhost:${PM_PORT}/health" >/dev/null 2>&1; then
            echo "pm-service did not become healthy within expected time" >&2
            wait "${RUN_PID}"
            exit 1
          fi

          echo "Verifying telemetry seed baseline (min ${TELEMETRY_MIN_SEEDED})"
          PM_PORT="${PM_PORT}" \
          TELEMETRY_MIN_SEEDED="${TELEMETRY_MIN_SEEDED}" \
          PODMAN_STATUS_SUMMARY_FILE="logs/poc-smoke/podman_status_summary.json" \
          scripts/podman_status.sh

          trap - EXIT
          wait "${RUN_PID}"

      - name: Summarize Slack notifications
        if: always()
        run: |
          if [[ -d logs/poc-smoke ]]; then
            echo "[slack] collected logs:";
            grep -ih "Slack" -r logs/poc-smoke || echo "(no Slack markers in logs/poc-smoke)"
          else
            echo "[slack] logs/poc-smoke not found"
          fi

      - name: Publish podman status summary
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          summary_file="logs/poc-smoke/podman_status_summary.json"
          if [[ ! -f "${summary_file}" ]]; then
            echo "[summary] ${summary_file} not found"
            exit 0
          fi

          cat "${summary_file}"

          eval "$(python3 <<'PY'
import json, os
path = os.environ.get('summary_file')
with open(path, 'r', encoding='utf-8') as fh:
    data = json.load(fh)

def esc(value):
    return value.replace('"', '\\"').replace('\n', ' ')

service = esc(str(data.get('service_health', 'unknown')))
telemetry = esc(str(data.get('telemetry_status', 'unknown')))
message = esc(str(data.get('telemetry_message', '')))
attempts = data.get('telemetry_attempts', 0)
reset = data.get('telemetry_reset_used', False)
print(f'SUMMARY_SERVICE="{service}"')
print(f'SUMMARY_TELEMETRY="{telemetry}"')
print(f'SUMMARY_MESSAGE="{message}"')
print(f'SUMMARY_ATTEMPTS={attempts}')
print(f'SUMMARY_RESET={reset}')
PY
          )"

          source scripts/lib/slack.sh
          slack_status="success"
          case "${SUMMARY_TELEMETRY}" in
            ok)
              slack_status="success"
              ;;
            empty|skipped)
              slack_status="warning"
              ;;
            error)
              slack_status="failure"
              ;;
          esac
          formatted="service=${SUMMARY_SERVICE}, telemetry=${SUMMARY_TELEMETRY} (attempts=${SUMMARY_ATTEMPTS}, reset=${SUMMARY_RESET})"
          if [[ -n "${SUMMARY_MESSAGE}" ]]; then
            formatted+=" - ${SUMMARY_MESSAGE}"
          fi
          slack_send "${slack_status}" "Podman status summary" "${formatted}" || true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ui-poc/playwright-report
          if-no-files-found: ignore
