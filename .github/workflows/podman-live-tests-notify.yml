name: Podman Live Tests Notifications

on:
  workflow_run:
    workflows: ["Podman Live Playwright Tests"]
    types: [completed]

jobs:
  notify:
    runs-on: ubuntu-latest
    if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          RUN_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          RUN_URL: ${{ github.event.workflow_run.html_url }}
          RUN_DURATION: ${{ github.event.workflow_run.run_duration_ms }}
          RUN_JOBS_URL: ${{ github.event.workflow_run.jobs_url }}
          RUN_ID: ${{ github.event.workflow_run.id }}
          ARTIFACTS_URL: ${{ github.event.workflow_run.artifacts_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source scripts/lib/slack.sh
          case "$RUN_CONCLUSION" in
            success)
              status="success"
              title="Podman live tests passed"
              ;;
            failure|timed_out)
              status="failure"
              title="Podman live tests failed"
              ;;
            *)
              status="warning"
              title="Podman live tests conclusion: $RUN_CONCLUSION"
              ;;
          esac
          duration_minutes=0
          if [[ -n "$RUN_DURATION" ]]; then
            duration_minutes=$(python3 - <<'PY'
import os
import sys

value = os.environ.get("RUN_DURATION", "")
if not value:
    sys.exit(0)

try:
    minutes = round(int(value) / 60000, 1)
except ValueError:
    sys.exit(0)
else:
    print(f"{minutes:.1f}")
PY
            )
            if [[ -z "$duration_minutes" ]]; then
              duration_minutes=0
            fi
          fi
          message="$title | duration=${duration_minutes}m"
          message+=" | details: $RUN_URL"

          jobs_summary=""
          if [[ -n "$RUN_JOBS_URL" ]] && command -v gh >/dev/null 2>&1; then
            jobs_payload=$(gh api "$RUN_JOBS_URL" --paginate 2>/dev/null || echo "")
            if [[ -n "$jobs_payload" ]]; then
              jobs_summary=$(JOBS_PAYLOAD="$jobs_payload" python3 <<'PY'
import json, os, sys
payload = os.environ.get("JOBS_PAYLOAD", "")
if not payload:
    sys.exit(0)
try:
    data = json.loads(payload)
except json.JSONDecodeError:
    sys.exit(0)
jobs = data.get("jobs", [])
lines = []
for job in jobs:
    conclusion = job.get("conclusion") or job.get("status") or "unknown"
    name = job.get("name", "job")
    failure_step = ""
    for step in job.get("steps") or []:
        step_conclusion = step.get("conclusion")
        if step_conclusion not in (None, "success"):
            failure_step = step.get("name", "")
            break
    if failure_step:
        lines.append(f"- {name}: {conclusion} (failed step: {failure_step})")
    else:
        lines.append(f"- {name}: {conclusion}")
print("\n".join(lines))
PY
              ) || jobs_summary=""
            fi
          fi

          if [[ -n "$jobs_summary" ]]; then
            message+=$'\n'"${jobs_summary}"
          fi

          if [[ -n "$ARTIFACTS_URL" ]] && command -v gh >/dev/null 2>&1; then
            artifacts_payload=$(gh api "$ARTIFACTS_URL" 2>/dev/null || echo "")
            if [[ -n "$artifacts_payload" ]]; then
              artifact_lines=$(ARTIFACTS_PAYLOAD="$artifacts_payload" RUN_URL="$RUN_URL" python3 <<'PY'
import json, os, sys

payload = os.environ.get("ARTIFACTS_PAYLOAD", "")
run_url = os.environ.get("RUN_URL", "")
if not payload:
    sys.exit(0)

try:
    data = json.loads(payload)
except json.JSONDecodeError:
    sys.exit(0)

artifacts = data.get("artifacts", [])
if not artifacts:
    sys.exit(0)

lines = []
for artifact in artifacts:
    name = artifact.get("name", "artifact")
    url = artifact.get("archive_download_url")
    if url:
        lines.append(f"- {name}: {url}")
    else:
        lines.append(f"- {name}: download unavailable")

print("\n".join(lines))
PY
              )
              if [[ -n "$artifact_lines" ]]; then
                message+=$'\nArtifacts:\n'"${artifact_lines}"
              fi
            fi
          fi
          slack_send "$status" "Podman Live Tests" "$message"
