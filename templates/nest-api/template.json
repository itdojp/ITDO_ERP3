{
  "files": {
    "src/modules/{{moduleNameCamel}}/{{moduleNameCamel}}.module.ts": "import { Module } from '@nestjs/common';\nimport { {{moduleName}}Service } from './{{moduleNameCamel}}.service';\nimport { {{moduleName}}Resolver } from './{{moduleNameCamel}}.resolver';\n\n@Module({\n  providers: [{{moduleName}}Service, {{moduleName}}Resolver],\n  exports: [{{moduleName}}Service],\n})\nexport class {{moduleName}}Module {}\n",
    "src/modules/{{moduleNameCamel}}/{{moduleNameCamel}}.service.ts": "import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../shared/prisma.service';\nimport { Create{{moduleName}}Input, Update{{moduleName}}Input } from './dto/{{moduleNameCamel}}.dto';\n\n@Injectable()\nexport class {{moduleName}}Service {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async list() {\n    return this.prisma.{{routeCamel}}.findMany();\n  }\n\n  async get(id: string) {\n    return this.prisma.{{routeCamel}}.findUnique({ where: { id } });\n  }\n\n  async create(input: Create{{moduleName}}Input) {\n    return this.prisma.{{routeCamel}}.create({ data: input });\n  }\n\n  async update(id: string, input: Update{{moduleName}}Input) {\n    return this.prisma.{{routeCamel}}.update({ where: { id }, data: input });\n  }\n}\n",
    "src/modules/{{moduleNameCamel}}/{{moduleNameCamel}}.resolver.ts": "import { Resolver, Query, Args, Mutation } from '@nestjs/graphql';\nimport { {{moduleName}}Service } from './{{moduleNameCamel}}.service';\nimport { {{moduleName}}Model } from './models/{{moduleNameCamel}}.model';\nimport { Create{{moduleName}}Input, Update{{moduleName}}Input } from './dto/{{moduleNameCamel}}.dto';\n\n@Resolver(() => {{moduleName}}Model)\nexport class {{moduleName}}Resolver {\n  constructor(private readonly service: {{moduleName}}Service) {}\n\n  @Query(() => [{{moduleName}}Model])\n  async {{routeCamelPlural}}() {\n    return this.service.list();\n  }\n\n  @Mutation(() => {{moduleName}}Model)\n  async create{{moduleName}}(@Args('input') input: Create{{moduleName}}Input) {\n    return this.service.create(input);\n  }\n}\n",
    "src/modules/{{moduleNameCamel}}/dto/{{moduleNameCamel}}.dto.ts": "import { Field, InputType } from '@nestjs/graphql';\n\n@InputType()\nexport class Create{{moduleName}}Input {\n  @Field()\n  name!: string;\n\n  @Field({ nullable: true })\n  description?: string;\n}\n\n@InputType()\nexport class Update{{moduleName}}Input {\n  @Field({ nullable: true })\n  name?: string;\n\n  @Field({ nullable: true })\n  description?: string;\n}\n",
    "src/modules/{{moduleNameCamel}}/models/{{moduleNameCamel}}.model.ts": "import { Field, ObjectType, ID } from '@nestjs/graphql';\n\n@ObjectType()\nexport class {{moduleName}}Model {\n  @Field(() => ID)\n  id!: string;\n\n  @Field()\n  name!: string;\n\n  @Field({ nullable: true })\n  description?: string;\n}\n",
    "openapi/{{route}}.yaml": "openapi: 3.1.0\ninfo:\n  title: {{moduleName}} API\n  version: 0.1.0\npaths:\n  /api/v1/{{route}}:\n    get:\n      summary: List {{moduleName}}\n      operationId: list{{moduleName}}\n      responses:\n        '200':\n          description: successful operation\n  /api/v1/{{route}}/{id}:\n    get:\n      summary: Get {{moduleName}}\n      operationId: get{{moduleName}}\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n"
  },
  "helpers": {
    "moduleNameCamel": "{{ moduleName | camel }}",
    "routeCamel": "{{ route | camel }}",
    "routeCamelPlural": "{{ route | plural | camel }}"
  }
}
