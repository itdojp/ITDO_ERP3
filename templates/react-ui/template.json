{
  "files": {
    "ui/src/features/{{featureNameCamel}}/{{featureNameCamel}}Panel.tsx": "'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader } from '@itdo/ui-kit';\nimport { use{{featureName}}Data } from './use{{featureName}}Data';\n\nexport function {{featureName}}Panel() {\n  const { data, isLoading } = use{{featureName}}Data();\n  const [selectedId, setSelectedId] = useState<string | null>(null);\n\n  if (isLoading) {\n    return <Card>Loading {{featureName}}...</Card>;\n  }\n\n  return (\n    <Card>\n      <CardHeader title=\"{{featureName}}\" />\n      <CardContent>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </CardContent>\n    </Card>\n  );\n}\n",
    "ui/src/features/{{featureNameCamel}}/use{{featureName}}Data.ts": "import { useQuery } from '@tanstack/react-query';\n\nexport function use{{featureName}}Data() {\n  return useQuery({\n    queryKey: ['{{featureNameCamel}}'],\n    queryFn: async () => {\n      const response = await fetch('/api/{{featureNameParam}}');\n      if (!response.ok) {\n        throw new Error('Failed to fetch {{featureNameCamel}}');\n      }\n      return response.json();\n    },\n  });\n}\n",
    "ui/src/features/{{featureNameCamel}}/{{featureNameCamel}}Panel.stories.tsx": "import type { Meta, StoryObj } from '@storybook/react';\nimport { {{featureName}}Panel } from './{{featureNameCamel}}Panel';\n\nconst meta: Meta<typeof {{featureName}}Panel> = {\n  component: {{featureName}}Panel,\n  title: 'Features/{{featureName}}Panel',\n};\nexport default meta;\n\ntype Story = StoryObj<typeof {{featureName}}Panel>;\nexport const Default: Story = {\n  render: () => <{{featureName}}Panel />,\n};\n",
    "ui/tests/{{featureNameCamel}}Panel.test.tsx": "import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport type { ReactNode } from 'react';\nimport { {{featureName}}Panel } from '../src/features/{{featureNameCamel}}/{{featureNameCamel}}Panel';\n\nfunction Wrapper({ children }: { children: ReactNode }) {\n  const client = new QueryClient();\n  return <QueryClientProvider client={client}>{children}</QueryClientProvider>;\n}\n\ndescribe('{{featureName}}Panel', () => {\n  it('renders loading state', () => {\n    render(<{{featureName}}Panel />, { wrapper: Wrapper });\n    expect(screen.getByText(/Loading/)).toBeInTheDocument();\n  });\n});\n"
  },
  "helpers": {
    "featureNameCamel": "{{ featureName | camel }}",
    "featureNameParam": "{{ featureName | kebab }}"
  }
}
