generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          String         @id @default(cuid())
  code        String         @unique
  name        String
  description String?
  status      String         @default("draft")
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  plannedValue Float @default(0)
  earnedValue  Float @default(0)
  actualCost   Float @default(0)

  phases      Phase[]
  tasks       Task[]
  risks       Risk[]
  chatThreads ChatThread[]
  burndown    BurndownPoint[]
}

model Phase {
  id        String   @id @default(cuid())
  projectId String
  name      String
  sortOrder Int      @default(0)
  startDate DateTime?
  endDate   DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  phaseId     String?
  name        String
  description String?
  status      String
  startDate   DateTime
  endDate     DateTime
  effortHours Float      @default(0)
  orderIndex  Int        @default(0)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phase   Phase?  @relation(fields: [phaseId], references: [id], onDelete: SetNull)
}

model Risk {
  id          String @id @default(cuid())
  projectId   String
  probability Int
  impact      Int
  status      String
  summary     String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ChatThread {
  id               String        @id @default(cuid())
  projectId        String
  provider         String
  externalThreadId String        @unique
  channelName      String?
  summary          String?
  summaryEmbedding String?
  summaryLanguage  String?
  summaryUsage     String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  project  Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  threadId  String
  author    String
  content   String
  postedAt  DateTime

  thread ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model BurndownPoint {
  id         String  @id @default(cuid())
  projectId  String
  label      String
  planned    Float
  actual     Float
  orderIndex Int     @default(0)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
